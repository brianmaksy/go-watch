<script src="/static/admin/js/pusher.min.js"></script>

<script>
    let pusher = new Pusher("{{.PreferenceMap["pusher-key"]}}", {
        authEndPoint: "/pusher/auth",
        wsHost: "localhost",
        wsPort: 4001,
        forceTLS: false,
        enabledTransports: ["ws", "wss"], 
        disabledTransports: []
    }); 

    // nts - not to conflate this channel with go lang channel 
    // nts - .user can be accessed since it's part of td. 
    // nts - channels must begin with either public or private 
    let publicChannel = pusher.subscribe("public-channel"); 
    let privateChannel = pusher.subscribe("private-channel-{{.User.ID}}")

    privateChannel.bind("private-message", function(data) {
        attention.alert({
            html: data.message,
            icon: 'success',
        })
    })

    // to match the string in start-monitoring
    publicChannel.bind("app-starting", function (data) {
        let toggle = document.getElementById("monitoring-live");
        toggle.checked = true;
        successAlert(data.message);
    })

    publicChannel.bind("app-stopping", function (data) {
        warningAlert(data.message);
        let toggle = document.getElementById("monitoring-live");
        toggle.checked = false;
        

        let scheduleTableExists = !!document.getElementById("schedule-table");
        if (scheduleTableExists) {
            let scheduleTable = document.getElementById("schedule-table");
            scheduleTable.tBodies[0].innerHTML = ""; 

            let newRow = scheduleTable.tBodies[0].insertRow(-1); 
            let newCell = newRow.insertCell(0);
            newCell.setAttribute("colspan", "5");
            newCell.innerHTML = "No scheduled checks";
        }
    })

    publicChannel.bind("schedule-item-removed-event", function(data) {
        // exec if ID matches 
        let rowExists = !!document.getElementById("schedule-" + data.host_service_id);
        if (rowExists) {
            let row = document.getElementById("schedule-" + data.host_service_id);
            row.parentNode.removeChild(row);

            // check to see if we need to add a no scheduled checks row 
            let currentTable = document.getElementById("schedule-table");
            if (currentTable.rows.length === 1) {
                // add a row 
                let newRow = currentTable.tBodies[0].insertRow(-1);
                let newCell = newRow.insertCell(0);
                newCell.setAttribute("colspan", "5");
                newCell.innerHTML = "No scheduled checks";
            }
        }
    })

    publicChannel.bind("schedule-changed-event", function(data) {
        let scheduleTableExists = !!document.getElementById("schedule-table");
        if (scheduleTableExists) {
            let scheduleTable = document.getElementById("schedule-table");
            
            // check to see if table contains "no scheduled checks!"
            let tableContent = scheduleTable.innerHTML;
            if (tableContent.includes("No scheduled checks")) {
                let rowCount = scheduleTable.rows.length;
                for (let i = rowCount -1; i > 0; i--) {
                    scheduleTable.deleteRow(i);
                }
            }
            // delete existing row 
            let rowExists = !!document.getElementById("schedule-" + data.host_service_id);
            if (rowExists) {
                let row = document.getElementById("schedule-" + data.host_service_id);
                row.parentNode.removeChild(row);
            }
            let newRow = scheduleTable.tBodies[0].insertRow(-1);
            newRow.setAttribute("id", "schedule-" + data.host_service_id);

            let newCell = newRow.insertCell(0);
            let newText = document.createTextNode(data.host);
            newCell.appendChild(newText);

            newCell = newRow.insertCell(1);
            newText = document.createTextNode(data.service);
            newCell.appendChild(newText);

            newCell = newRow.insertCell(2);
            newText = document.createTextNode(data.schedule);
            newCell.appendChild(newText);

            newCell = newRow.insertCell(3);
            newText = document.createTextNode(data.last_run);
            newCell.appendChild(newText);

            newCell = newRow.insertCell(4);
            // nts - just in case error from scheduler? 
            if (data.next_run === undefined) {
                newText = document.createTextNode("Pending")
            } else {
                newText = document.createTextNode(data.next_run);
            }
            newCell.appendChild(newText);
        }
    })

    publicChannel.bind("host-service-status-changed", function(data) {
        attention.toast({
            msg: data.message,
            icon: 'info',
            timer: 30000,
            showCloseButton: true,
        })

        // remove existing table rows if exist - by building string 
        deleteHostServiceRow(data.host_service_id);
        
        // update tables if they exist 
        updateHostServiceTable(data);
        
    })

    function deleteHostServiceRow(hostServiceID) {
        // nts - hostServiceID is a string 
        // nts - will remove from the place wherever the host_service is 
        // (found via host_service_id passed in testServiceForHost in perform-checks.go
        let exists = !!document.getElementById("host-service-" + hostServiceID);
        if (exists) {
            let row = document.getElementById("host-service-" + hostServiceID);
            row.parentNode.removeChild(row);

            // if this was the last row, add a no "services" row. 

            let tables = ["healthy", "pending", "warning", "problem"];

            for (let i = 0; i < tables.length; i++) {
                let currentTableExists = !!document.getElementById(tables[i] + "-table");
                if (currentTableExists) {
                    let currentTable = document.getElementById(tables[i] + "-table");
                    if (currentTable.rows.length === 1) {
                        let newRow = currentTable.tBodies[0].insertRow(-1);
                        let newCell = newRow.insertCell(0);
                        newCell.setAttribute("colspan", "4");
                        newCell.innerHTML = "No services";
                    }
                }
            }
        }
    }

    function updateHostServiceTable(data) {
        let tableExists = !!document.getElementById(data.status + "-table");
        if (tableExists) {
            // add row 
            let tableRef = document.getElementById(data.status + "-table");

            // remove "no services" row if empty - without assigning js ID to the tr of "no services"
            let tableContent = tableRef.innerHTML;
            if (tableContent.includes("No services")) {
                tableRef.deleteRow(1);
            }
            

            let newRow = tableRef.tBodies[0].insertRow(-1); // slots before existing row, hence -1. 

            // add a js id to new row 
            newRow.setAttribute("id", "host-service-" + data.host_service_id);

            // insert the first td 
            let newCell = newRow.insertCell(0);
            newCell.innerHTML = `
                <a href="/admin/host/${data.host_id}#healthy-content">${data.host_name}
                </a>`;

            // insert second td 
            newCell = newRow.insertCell(1);
            newCell.innerHTML = `
                <span class="${data.icon}"></span> ${data.service_name}
                <span class="badge bg-secondary pointer" onclick="checkNow(${data.host_service_id}, '${data.status}')">
                    Check Now
                </span>`;

            // insert third td 
            newCell = newRow.insertCell(2);
            if (data.status !== "pending") {
                newCell.innerHTML = `${data.last_check}`;
            } else {
                newCell.innerHTML = "Pending";
            } 
    }
}


    publicChannel.bind("host-service-count-changed", function(data){
        // if receive event AND on that page 
        let healthyCountExists = !!document.getElementById("healthy_count"); // turns into boolean 
        // nts - this ID (from dashboard.jet) must be unique, so changes are only made in dashboard page. 
        if (healthyCountExists) {
            // change the "no_healthy" to data.healthy_count got from ScheduledCheck func in perform-checks.go
            document.getElementById("healthy_count").innerHTML = data.healthy_count; 
            document.getElementById("problem_count").innerHTML = data.problem_count;
            document.getElementById("pending_count").innerHTML = data.pending_count;
            document.getElementById("warning_count").innerHTML = data.warning_count;
        }
    })


    let attention = Prompt();

    {{if .Flash != ""}}
        successAlert('{{.Flash}}')
    {{end}}

    {{if .Warning != ""}}
        warningAlert('{{.Warning}}')
    {{end}}

    {{if .Error != ""}}
        errorAlert('{{.Error}}')
    {{end}}

    document.addEventListener("DOMContentLoaded", function () {
        // nts - this function allows hyperlinking to tabs directly. 
        let tabMap = new Map();
        let tabs = document.querySelectorAll('[data-toggle="tab"]');
        let i = 0;
        Array.prototype.filter.call(tabs, function (el) {
            el.addEventListener("click", function () {
                history.pushState("", document.title, window.location.pathname);
                localStorage.setItem('activeTab', el.getAttribute("data-target"));
            })

            tabMap.set(el.getAttribute("href"), i);
            i++;
        });

        if (!window.location.hash) {
            let activeTab = localStorage.getItem('activeTab');
            if (activeTab) {
                document.querySelectorAll('[data-toggle="tab"]')[activeTab].Tab.show()
            }
        } else {
            if (tabMap.has(window.location.hash)) {
                document.querySelectorAll('[data-toggle="tab"]')[tabMap.get(window.location.hash)].Tab.show()
            }
        }

        document.getElementById("monitoring-live").addEventListener("change", function(){
            let enabled = document.getElementById("monitoring-live").checked;
            if (!enabled) {
                attention.confirm({
                    html: "This will stop monitoring of all hosts and services. Are you sure?",
                    callback: function(result) {
                        if (result) {
                            // want to turn monitoring off 
                            updateSystemPref("monitoring_live", "0"); 
                            toggleMonitoring(0);
                        } else {
                            // purely cosmetic. 
                            document.getElementById("monitoring-live").checked = true; 
                        }
                    }
                })
            } else {
                updateSystemPref("monitoring_live", "1");
                toggleMonitoring(1); // need wait till updateSystemPref finishes, because there 
                 // we set app.PrefMap value to 1. Which then triggers StartMonitoring()
            }
        })
    });

    function updateSystemPref(prefName, prefValue) {
        let formData = new FormData(); 
        formData.append("pref_name", prefName);
        formData.append("pref_value", prefValue);
        formData.append("csrf_token", "{{.CSRFToken}}");
        // xml http request 
        let ajax = new XMLHttpRequest(); 
        // json back to the server 
        ajax.responseType = "json";
        // POST will then call the function of SetSystemPref in handlers. 
        ajax.open("POST", "/admin/preference/ajax/set-system-pref");
        ajax.send(formData);
        // nts - the below checks if data sent successfully? 
        ajax.onreadystatechange = function() {
            // readyState of 4 means request finished and response ready
            if (ajax.readyState === 4) {
                let resp = ajax.response;
                if (!resp.ok) {
                    errorAlert("Errors: " + resp.message);
                }
            }
        }
    }

    // nts - why need this separate function? Because updateSystemPref is more broad for any sys. 
    // toggle monitoring is the on and off button
    function toggleMonitoring(enabled) {
        let formData = new FormData(); 
        formData.append("enabled", enabled);
        formData.append("csrf_token", "{{.CSRFToken}}");
        // xml http request 
        let ajax = new XMLHttpRequest(); 
        // json back to the server 
        ajax.responseType = "json";
        // POST will then call the function of SetSystemPref in handlers. 
        ajax.open("POST", "/admin/preference/ajax/toggle-monitoring");
        ajax.send(formData);
        // nts - the below checks if data sent successfully? 
        ajax.onreadystatechange = function() {
            // readyState of 4 means request finished and response ready
            if (ajax.readyState === 4) {
                let resp = ajax.response;
                if (!resp.ok) {
                    errorAlert("Errors: " + resp.message);
                }
            }
        }
    }

    function checkNow(id, oldStatus) {
                console.log("Clicked checkNow()")
                // nts - fetch gets the url
                fetch('/admin/perform-check/' + id + '/' + oldStatus)
                    .then(response => response.json())
                    .then(data => {
                        console.log("Ok:", data.ok, "message:", data.message)

                        if (data.ok) {
                            if (data.old_status !== data.new_status) {
                                attention.toast({
                                msg: data.message, 
                                icon: "info",
                                timer: 60000,
                                showCloseButton: true,
                            })
                            } else {
                                attention.toast({
                                msg: "Service is still in " + data.new_status + "state", 
                                icon: "info",
                                timer: 5000,
                                showCloseButton: true,
                            })
                            }
                            
                        } else {
                            errorAlert("Something went wrong");
                        }
                    });
            }
</script>
