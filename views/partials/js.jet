<script src="/static/admin/js/pusher.min.js"></script>

<script>
    let pusher = new Pusher("{{.PreferenceMap["pusher-key"]}}", {
        authEndPoint: "/pusher/auth",
        wsHost: "localhost",
        wsPort: 4001,
        forceTLS: false,
        enabledTransports: ["ws", "wss"], 
        disabledTransports: []
    }); 

    let publicChannel = pusher.subscribe("public-channel"); 

    // to match the string in start-monitoring.go
    publicChannel.bind("app-starting", function (data) {
        successAlert(data.message);
    })

    publicChannel.bind("app-stopping", function (data) {
        warningAlert(data.message);
    })

    // things we want to look for 
    // - service goes down
    // - service comes up 
    // - service status changed 
    // - schedule changed 
    // - monitoring is turned off 
    // - next-run event changes 

    let attention = Prompt();

    {{if .Flash != ""}}
        successAlert('{{.Flash}}')
    {{end}}

    {{if .Warning != ""}}
        warningAlert('{{.Warning}}')
    {{end}}

    {{if .Error != ""}}
        errorAlert('{{.Error}}')
    {{end}}

    document.addEventListener("DOMContentLoaded", function () {
        // nts - this function allows hyperlinking to tabs directly. 
        let tabMap = new Map();
        let tabs = document.querySelectorAll('[data-toggle="tab"]');
        let i = 0;
        Array.prototype.filter.call(tabs, function (el) {
            el.addEventListener("click", function () {
                history.pushState("", document.title, window.location.pathname);
                localStorage.setItem('activeTab', el.getAttribute("data-target"));
            })

            tabMap.set(el.getAttribute("href"), i);
            i++;
        });

        if (!window.location.hash) {
            let activeTab = localStorage.getItem('activeTab');
            if (activeTab) {
                document.querySelectorAll('[data-toggle="tab"]')[activeTab].Tab.show()
            }
        } else {
            if (tabMap.has(window.location.hash)) {
                document.querySelectorAll('[data-toggle="tab"]')[tabMap.get(window.location.hash)].Tab.show()
            }
        }

        document.getElementById("monitoring-live").addEventListener("change", function(){
            let enabled = document.getElementById("monitoring-live").checked;
            if (!enabled) {
                attention.confirm({
                    html: "This will stop monitoring of all hosts and services. Are you sure?",
                    callback: function(result) {
                        if (result) {
                            // want to turn monitoring off 
                            updateSystemPref("monitoring_live", "0"); 
                            toggleMonitoring(0);
                        } else {
                            // purely cosmetic. 
                            document.getElementById("monitoring-live").checked = true; 
                        }
                    }
                })
            } else {
                updateSystemPref("monitoring_live", "1");
                toggleMonitoring(1); // need wait till updateSystemPref finishes, because there 
                 // we set app.PrefMap value to 1. Which then triggers StartMonitoring()
            }
        })
    });

    function updateSystemPref(prefName, prefValue) {
        let formData = new FormData(); 
        formData.append("pref_name", prefName);
        formData.append("pref_value", prefValue);
        formData.append("csrf_token", "{{.CSRFToken}}");
        // xml http request 
        let ajax = new XMLHttpRequest(); 
        // json back to the server 
        ajax.responseType = "json";
        // POST will then call the function of SetSystemPref in handlers. 
        ajax.open("POST", "/admin/preference/ajax/set-system-pref");
        ajax.send(formData);
        // nts - the below checks if data sent successfully? 
        ajax.onreadystatechange = function() {
            // readyState of 4 means request finished and response ready
            if (ajax.readyState === 4) {
                let resp = ajax.response;
                if (!resp.ok) {
                    errorAlert("Errors: " + resp.message);
                }
            }
        }
    }

    // nts - why need this separate function? Because updateSystemPref is more broad for any sys. 
    // toggle monitoring is the on and off button
    function toggleMonitoring(enabled) {
        let formData = new FormData(); 
        formData.append("enabled", enabled);
        formData.append("csrf_token", "{{.CSRFToken}}");
        // xml http request 
        let ajax = new XMLHttpRequest(); 
        // json back to the server 
        ajax.responseType = "json";
        // POST will then call the function of SetSystemPref in handlers. 
        ajax.open("POST", "/admin/preference/ajax/toggle-monitoring");
        ajax.send(formData);
        // nts - the below checks if data sent successfully? 
        ajax.onreadystatechange = function() {
            // readyState of 4 means request finished and response ready
            if (ajax.readyState === 4) {
                let resp = ajax.response;
                if (!resp.ok) {
                    errorAlert("Errors: " + resp.message);
                }
            }
        }
    }
</script>
